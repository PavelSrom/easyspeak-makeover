generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String?
  invitationSent    Boolean  @default(false)
  clubId            String
  Club              Club     @relation(fields: [clubId], references: [id])
  Profile           Profile?
  createdAt         DateTime @default(now())
  pwResetToken      String?
  pwResetExpiration String?
}

model Profile {
  id            String         @id @default(cuid())
  userId        String         @unique
  User          User           @relation(fields: [userId], references: [id])
  name          String
  surname       String
  phone         String
  avatar        String? // public URL
  roleTypeId    String?
  ClubRole      ClubRole?      @relation(fields: [roleTypeId], references: [id])
  pathwayId     String
  Pathway       Pathway        @relation(fields: [pathwayId], references: [id])
  receiveEmail  Boolean        @default(false)
  receiveNotifs Boolean        @default(false)
  Notifications Notification[]
  Posts         Post[]
  Comments      Comment[]
  Meetings      Meeting[] // meetings the user has managed
  Attendance    Attendance[]
}

model Notification {
  id         String   @id @default(cuid())
  receiverId String
  Receiver   Profile  @relation(fields: [receiverId], references: [id])
  title      String
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  authorId  String
  Author    Profile   @relation(fields: [authorId], references: [id])
  clubId    String
  Club      Club      @relation(fields: [clubId], references: [id])
  title     String
  body      String
  isPinned  Boolean   @default(false)
  createdAt DateTime  @default(now())
  Comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  authorId  String
  Author    Profile  @relation(fields: [authorId], references: [id])
  postId    String
  Post      Post     @relation(fields: [postId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

model Meeting {
  id          String       @id @default(cuid())
  clubId      String
  Club        Club         @relation(fields: [clubId], references: [id])
  managerId   String
  Manager     Profile      @relation(fields: [managerId], references: [id])
  venue       String
  timeStart   DateTime
  timeEnd     DateTime
  description String
  theme       String?
  wotd        String?
  Attendance  Attendance[]
}

model Attendance {
  id         String            @id @default(cuid())
  meetingId  String
  Meeting    Meeting           @relation(fields: [meetingId], references: [id])
  roleTypeId String
  RoleType   MeetingRoleType   @relation(fields: [roleTypeId], references: [id])
  memberId   String?
  Member     Profile?          @relation(fields: [memberId], references: [id])
  roleStatus MeetingRoleStatus
  Speech     Speech[]
}

model Speech {
  id           String     @id @default(cuid())
  attendanceId String
  Attendance   Attendance @relation(fields: [attendanceId], references: [id])
  title        String
  description  String
}

model Club {
  id          String    @id @default(cuid())
  name        String
  location    String
  description String
  Meetings    Meeting[]
  Posts       Post[]
  Users       User[]
}

model ClubRole {
  id      String    @id @default(cuid())
  name    String
  Profile Profile[]
}

model Pathway {
  id      String    @id @default(cuid())
  name    String
  Profile Profile[]
}

model MeetingRoleType {
  id         String       @id @default(cuid())
  name       String
  Attendance Attendance[]
}

enum MeetingRoleStatus {
  PENDING
  CONFIRMED
  UNASSIGNED
}
